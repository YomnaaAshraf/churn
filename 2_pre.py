# -*- coding: utf-8 -*-
"""2_pre.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19nop3ZVoT2nkKZdoiB--CdNUX_hH9M36
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np

data_path = 'WA_Fn-UseC_-Telco-Customer-Churn.csv'
df = pd.read_csv(data_path)

df.dropna(subset=['TotalCharges'], inplace=True)
df.drop('customerID', axis=1, inplace=True, errors='ignore')
binary_cols = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling']
for col in binary_cols:
    df[col] = df[col].map({'Yes': 1, 'No': 0})
df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

internet_service_cols = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                        'TechSupport', 'StreamingTV', 'StreamingMovies']
for col in internet_service_cols:
    df[col] = df[col].replace('No internet service', 'No')
df['MultipleLines'] = df['MultipleLines'].replace('No phone service', 'No')
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

df.dropna(subset=['TotalCharges'], inplace=True)

df.dropna(subset=['Churn'], inplace=True)

print(df.info())

churn_distribution = df['Churn'].value_counts(normalize=True)
print(churn_distribution)

from sklearn.preprocessing import LabelEncoder

def perform_feature_engineering(df):
    internet_services = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                        'TechSupport', 'StreamingTV', 'StreamingMovies']
    phone_services = ['PhoneService', 'MultipleLines']
    for col in internet_services:
        if col in df.columns:
            df[col] = df[col].map({'Yes': 1, 'No': 0, 'No internet service': 0}).fillna(0)

    for col in phone_services:
        if col in df.columns:
            if df[col].dtype == 'object':
                df[col] = df[col].map({'Yes': 1, 'No': 0, 'No phone service': 0}).fillna(0)
            else:
                df[col] = df[col].astype(int)

    categorical_cols = df.drop(['Churn'], axis=1).select_dtypes(include='object').columns

    categorical_cols = df.drop(['Churn'], axis=1).select_dtypes(include='object').columns
    for col in categorical_cols:
        if col in df.columns:
            le = LabelEncoder()
            df[col] = le.fit_transform(df[col].astype(str))
    return df

df_processed = perform_feature_engineering(df)

df_processed.to_csv('processed_telco_data.csv', index=False)