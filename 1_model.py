# -*- coding: utf-8 -*-
"""1_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LrSofq4MBw41HIIcq2IE2iPLfI9aDZeC
"""

import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import joblib
from sklearn.model_selection import train_test_split,GridSearchCV
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.shape

df.head()

df.info()

"""# Preprocessing"""

from sklearn.preprocessing import LabelEncoder
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.metrics import roc_curve, auc

df.dropna(subset=['TotalCharges'], inplace=True)
df.drop('customerID', axis=1, inplace=True, errors='ignore')
df.dropna(subset=['Churn'], inplace=True)

df

def perform_feature_engineering(df):
    # convert binary columns to numerical
    binary_cols = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling']
    for col in binary_cols:
        df[col] = df[col].map({'Yes': 1, 'No': 0})
    df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

    # convert internet services columns to yes/no
    internet_service_cols = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                        'TechSupport', 'StreamingTV', 'StreamingMovies']
    for col in internet_service_cols:
        df[col] = df[col].replace('No internet service', 'No')
    df['MultipleLines'] = df['MultipleLines'].replace('No phone service', 'No')
    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

    # convert yes/no columns to binary
    internet_services = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                        'TechSupport', 'StreamingTV', 'StreamingMovies']
    phone_services = ['PhoneService', 'MultipleLines']
    for col in internet_services:
        if col in df.columns:
            df[col] = df[col].map({'Yes': 1, 'No': 0}).fillna(0)
    for col in phone_services:
        if col in df.columns:
            if df[col].dtype == 'object':
                df[col] = df[col].map({'Yes': 1, 'No': 0}).fillna(0)
            else:
                df[col] = df[col].astype(int)


    df['TotalCharges'] = df['TotalCharges'].fillna(df['TotalCharges'].median())

    # convert categorical columns to numerical using Label Encoding
    categorical_cols = df.drop(['Churn'], axis=1).select_dtypes(include='object').columns
    for col in categorical_cols:
        if col in df.columns:
            le = LabelEncoder()
            df[col] = le.fit_transform(df[col].astype(str))
            joblib.dump(le, f'le_{col}.pkl')
    return df

df = perform_feature_engineering(df)

df

# train-test split
X = df.drop('Churn', axis=1)
y = df['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

y_train_smote.value_counts()

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train_smote)
X_test_scaled = scaler.transform(X_test)

import joblib
joblib.dump(scaler, 'scaler_first.pkl')

"""# Logistic Regression"""

from sklearn.metrics import f1_score

lr_model = LogisticRegression(random_state=42, max_iter=1000)
lr_model.fit(X_train_scaled,y_train_smote)
y_pred = lr_model.predict(X_test_scaled)
acc = accuracy_score(y_test,y_pred)
acc_train = accuracy_score(y_train_smote, lr_model.predict(X_train_scaled))
report = classification_report(y_test,y_pred)
f1 = f1_score(y_test, y_pred)
print(f'Train accuracy Score:{acc}')
print(f'Test accuracy Score:{acc}')
print(f'Classification Report:\n{report}')
print(f'F1 Score: {f1}')

# Plot Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d')
plt.title(f'Confusion Matrix for Logistic Regression')
plt.show()
sns.kdeplot(y_test, label='Actual',color='b')
sns.kdeplot(y_pred, label='Predicted',color='r')

# Plot ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, lr_model.predict_proba(X_test_scaled)[:, 1])
roc_auc = auc(fpr, tpr)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='red', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()

svc_model = SVC(probability=True, random_state=42)
svc_model.fit(X_train_scaled, y_train_smote)
y_pred = svc_model.predict(X_test_scaled)
acc = accuracy_score(y_test, y_pred)
acc_train = accuracy_score(y_train_smote, svc_model.predict(X_train_scaled))
report = classification_report(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f'Test accuracy Score:{acc}')
print(f'Train accuracy Score:{acc_train}')
print(f'Classification Report:\n{report}')
print(f'F1 Score: {f1}')

# Plot Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d')
plt.title(f'Confusion Matrix for SVC')
plt.show()
sns.kdeplot(y_test, label='Actual', color='b')
sns.kdeplot(y_pred, label='Predicted', color='r')

# Plot ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, svc_model.predict_proba(X_test_scaled)[:, 1])
roc_auc = auc(fpr, tpr)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='red', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()

"""# Shap (Interpretable AI)"""

import shap

# shap for logistic regression
explainer = shap.Explainer(lr_model, X_train_scaled)
shap_values = explainer(X_test_scaled)
shap.summary_plot(shap_values, X_test_scaled, feature_names=X_test.columns)

"""# Save Model"""

# Model saving
joblib.dump(lr_model, 'logistic_regression_model.pkl')
joblib.dump(svc_model, 'svc_model.pkl')